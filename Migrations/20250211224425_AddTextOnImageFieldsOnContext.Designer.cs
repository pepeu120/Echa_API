// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using echa_backend_dotnet.Models;

#nullable disable

namespace echa_backend_dotnet.Migrations
{
    [DbContext(typeof(EchaContext))]
    [Migration("20250211224425_AddTextOnImageFieldsOnContext")]
    partial class AddTextOnImageFieldsOnContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("echa_backend_dotnet.Models.AuthenticationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.ToTable("authentication_method", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Contribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("ContributorEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contributor_email");

                    b.Property<string>("ContributorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contributor_name");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("ItemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("item_id");

                    b.Property<string>("Message")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("message")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("StatusContributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("status_contribution_id")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<decimal>("Value")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContributorEmail" }, "idx_contribution_email");

                    b.HasIndex(new[] { "ItemId" }, "idx_contribution_item_id");

                    b.HasIndex(new[] { "StatusContributionId" }, "idx_contribution_status_contribution_id");

                    b.ToTable("contribution", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("additional_info")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("ErrorCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("error_code")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("ErrorLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("error_level");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<DateTime>("OccurrenceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("occurrence_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("RequestData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("request_data")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("StackTrace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("stack_trace")
                        .HasDefaultValueSql("NULL");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "idx_error_log_user_id");

                    b.ToTable("error_log", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Font", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique()
                        .HasDatabaseName("name1");

                    b.ToTable("font", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("image")
                        .HasDefaultValueSql("NULL");

                    b.Property<Guid>("ListId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("list_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("StatusItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("status_item_id")
                        .HasDefaultValueSql("1");

                    b.Property<decimal>("TotalValue")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("total_value");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "idx_item_category_id");

                    b.HasIndex(new[] { "ListId" }, "idx_item_list_id");

                    b.HasIndex(new[] { "StatusItemId" }, "idx_item_status_item_id");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.List", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FontId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("font_id")
                        .HasDefaultValueSql("1");

                    b.Property<string>("HighlightColor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("highlight_color")
                        .HasDefaultValueSql("'#609558'");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("image")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("StatusListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("status_list_id")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FontId" }, "idx_list_font_id");

                    b.HasIndex(new[] { "StatusListId" }, "idx_list_status_list_id");

                    b.HasIndex(new[] { "UserId" }, "idx_list_user_id");

                    b.ToTable("list", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("NotificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("notification_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<bool?>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("read")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("TypeNotificationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("type_notification_id");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TypeNotificationId" }, "idx_notification_type_notification_id");

                    b.HasIndex(new[] { "UserId" }, "idx_notification_user_id");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.PasswordRecovery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("UtilizationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("utilization_date")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "idx_password_recovery_user_id");

                    b.HasIndex(new[] { "Token" }, "token")
                        .IsUnique();

                    b.ToTable("password_recovery", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique()
                        .HasDatabaseName("name2");

                    b.ToTable("payment_method", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.StatusContribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique()
                        .HasDatabaseName("name3");

                    b.ToTable("status_contribution", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.StatusItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique()
                        .HasDatabaseName("name4");

                    b.ToTable("status_item", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.StatusList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique()
                        .HasDatabaseName("name5");

                    b.ToTable("status_list", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.StatusTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique()
                        .HasDatabaseName("name6");

                    b.ToTable("status_transaction", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.StatusUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique()
                        .HasDatabaseName("name7");

                    b.ToTable("status_user", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("ContributionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("contribution_id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int(11)")
                        .HasColumnName("payment_method_id");

                    b.Property<int>("StatusTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("status_transaction_id")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("transaction_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("transaction_reference");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContributionId" }, "idx_transaction_contribution_id");

                    b.HasIndex(new[] { "PaymentMethodId" }, "idx_transaction_payment_method_id");

                    b.HasIndex(new[] { "StatusTransactionId" }, "idx_transaction_status_transaction_id");

                    b.HasIndex(new[] { "TransactionReference" }, "transaction_reference")
                        .IsUnique();

                    b.ToTable("transaction", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.TypeNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique()
                        .HasDatabaseName("name8");

                    b.ToTable("type_notification", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("AuthenticationMethodId")
                        .HasColumnType("int(11)")
                        .HasColumnName("authentication_method_id");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contact_number");

                    b.Property<string>("Cpf")
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cpf");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("ExternalAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("external_auth_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("password")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("PixKey")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pix_key");

                    b.Property<string>("ProfileImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("profile_image")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("StatusUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("status_user_id")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("NULL ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Cpf" }, "cpf")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "ExternalAuthId" }, "external_auth_id")
                        .IsUnique();

                    b.HasIndex(new[] { "AuthenticationMethodId" }, "idx_user_authentication_method_id");

                    b.HasIndex(new[] { "StatusUserId" }, "idx_user_status_user_id");

                    b.HasIndex(new[] { "PixKey" }, "pix_key")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Contribution", b =>
                {
                    b.HasOne("echa_backend_dotnet.Models.Item", "Item")
                        .WithMany("Contributions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contribution_ibfk_1");

                    b.HasOne("echa_backend_dotnet.Models.StatusContribution", "StatusContribution")
                        .WithMany("Contributions")
                        .HasForeignKey("StatusContributionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("contribution_ibfk_2");

                    b.Navigation("Item");

                    b.Navigation("StatusContribution");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.ErrorLog", b =>
                {
                    b.HasOne("echa_backend_dotnet.Models.User", "User")
                        .WithMany("ErrorLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("error_log_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Item", b =>
                {
                    b.HasOne("echa_backend_dotnet.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("item_ibfk_2");

                    b.HasOne("echa_backend_dotnet.Models.List", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("item_ibfk_1");

                    b.HasOne("echa_backend_dotnet.Models.StatusItem", "StatusItem")
                        .WithMany("Items")
                        .HasForeignKey("StatusItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("item_ibfk_3");

                    b.Navigation("Category");

                    b.Navigation("List");

                    b.Navigation("StatusItem");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.List", b =>
                {
                    b.HasOne("echa_backend_dotnet.Models.Font", "Font")
                        .WithMany("Lists")
                        .HasForeignKey("FontId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("list_ibfk_2");

                    b.HasOne("echa_backend_dotnet.Models.StatusList", "StatusList")
                        .WithMany("Lists")
                        .HasForeignKey("StatusListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("list_ibfk_3");

                    b.HasOne("echa_backend_dotnet.Models.User", "User")
                        .WithMany("Lists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("list_ibfk_1");

                    b.Navigation("Font");

                    b.Navigation("StatusList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Notification", b =>
                {
                    b.HasOne("echa_backend_dotnet.Models.TypeNotification", "TypeNotification")
                        .WithMany("Notifications")
                        .HasForeignKey("TypeNotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("notification_ibfk_2");

                    b.HasOne("echa_backend_dotnet.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notification_ibfk_1");

                    b.Navigation("TypeNotification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.PasswordRecovery", b =>
                {
                    b.HasOne("echa_backend_dotnet.Models.User", "User")
                        .WithMany("PasswordRecoveries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("password_recovery_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Transaction", b =>
                {
                    b.HasOne("echa_backend_dotnet.Models.Contribution", "Contribution")
                        .WithMany("Transactions")
                        .HasForeignKey("ContributionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("transaction_ibfk_1");

                    b.HasOne("echa_backend_dotnet.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("transaction_ibfk_2");

                    b.HasOne("echa_backend_dotnet.Models.StatusTransaction", "StatusTransaction")
                        .WithMany("Transactions")
                        .HasForeignKey("StatusTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("transaction_ibfk_3");

                    b.Navigation("Contribution");

                    b.Navigation("PaymentMethod");

                    b.Navigation("StatusTransaction");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.User", b =>
                {
                    b.HasOne("echa_backend_dotnet.Models.AuthenticationMethod", "AuthenticationMethod")
                        .WithMany("Users")
                        .HasForeignKey("AuthenticationMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("user_ibfk_1");

                    b.HasOne("echa_backend_dotnet.Models.StatusUser", "StatusUser")
                        .WithMany("Users")
                        .HasForeignKey("StatusUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("user_ibfk_2");

                    b.Navigation("AuthenticationMethod");

                    b.Navigation("StatusUser");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.AuthenticationMethod", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Contribution", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Font", b =>
                {
                    b.Navigation("Lists");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.Item", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.List", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.PaymentMethod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.StatusContribution", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.StatusItem", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.StatusList", b =>
                {
                    b.Navigation("Lists");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.StatusTransaction", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.StatusUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.TypeNotification", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("echa_backend_dotnet.Models.User", b =>
                {
                    b.Navigation("ErrorLogs");

                    b.Navigation("Lists");

                    b.Navigation("Notifications");

                    b.Navigation("PasswordRecoveries");
                });
#pragma warning restore 612, 618
        }
    }
}
